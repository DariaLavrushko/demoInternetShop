 Работа с товарами:
 - передать все товары:
 Method: GET
 URL: /products
 Request:-
 Response:
 [
     {
        "id": 1,
        "name": "iPhone 15",
        "description": "iPhone 15 ....",
        "category": { "id" : 1,
                     "categoryName": "phones"}
        "manufacturer": {"id" : 1,
                        "name": "Apple",
                        "country": "China"}
        "productPrice": 1500,
        "productQuantity": 24
        }
     },
     {}
 ]
 - передать список категорий
  Method: GET
  URL: /products/category
  Request: -
  Response:
   [
       { "id" : 1,
         "categoryName": "phones"},
       {}
   ]

   - передать товары по категории
     Method: GET
     URL: /products/category/{category_id}
     @GetMapping(/products/category/{category_id})
     public List<ProductResponseDTO> getProducts=ByCategoryAndPrice(@PathVariable("category_id") Integer categoryId,
                                                                    @RequestParam(defaultValue = "0") Double minPrice,
                                                                    @RequestParam(defaultValue = "Double.MAX_VALUE") Double maxPrice) {}

     Request: -
     Response:
      [
          {
                  "id": 1,
                  "name": "iPhone 15",
                  "description": "iPhone 15 ....",
                  "manufacturer": {"id" : 1,
                                  "name": "Apple",
                                  "country": "China"}
                  "productPrice": 1500,
                  "productQuantity": 24
                  },
          {}
      ]


 - передать товары по категории в ценовом диапазоне
  Method: GET
  URL: /products/category_price
  Request:
  {
    "category_id": 1,
    "min_price": 1000,
    "max_price": 1500
  }
  Response:
 [
     {
        "id":
        "name":
        "description":
        "manufacturer": {
                            "manufacturer_name":
                          }
        "productInfo": {
            "price":
            "quantity":
        }
     },
     {}
 ]
 - передать товары по категории и по производителю
  Method: GET
  URL: /products/category_manufacturer
  Request:
  {
    "category_name":
    "manufacturer_name":
  }
  Response:
    Response:
   [
       {
          "id":
          "name":
          "description":
          "manufacturer": {
                            "manufacturer_name":
                          }
          "productInfo": {
              "price":
              "quantity":
          }
       },
       {}
   ]
 - передать товары по категории и по производителю и по цене
  Method: GET
  URL: /products/category_manufacturer_price

       @GetMapping(/products/category_manufacturer_price/{category_id}/)
       public List<ProductResponseDTO> getProducts=ByCategoryAndPrice(@PathVariable("category_id") Integer categoryId,
                                                                      @RequestParam("manufacturer") String manufacturer,
                                                                      @RequestParam(defaultValue = "0") Double minPrice,
                                                                      @RequestParam(defaultValue = "Double.MAX_VALUE") Double maxPrice) {}



  Request:
  {
    "category_name":
    "manufacturer_name":
    "min_price":
    "max_price":
  }
  Response:
    Response:
   [
       {
          "id":
          "name":
          "description":
          "category":{
                        "category_name":
                     }
          "manufacturer":{
                          "manufacturer_name":
                         }
          "productInfo": {
              "price":
              "quantity":
          }
       },
       {}
   ]
 - передать данные о количестве конкретного товара
  Method: GET
  URL: /products/product_quantity/{product_id}
  Request:-
  Response:
 {
    "quantity":
 }
 - показать конкретный товар по id
  Method: GET
  URL: /products/product/{product_id}
  Request:-
  Response:
 {
    "id":
    "name":
    "description":
    "manufacturer":
    "productInfo": {
        "price":
        "quantity":
    }
 }

 Работа с пользователем:
 - регистрация
Method: POST
URL: /users/registration
Request:
{
    "username":
    "password":
}
Response:
{
  "success":
  "message":
}
Response:
 - авторизация
 Method: PUT
 URL: /users/autorisation/{user_id}
 Request:
 {
     "username":
 }
 Response:
 {
   "success":
   "message":
 }
 - редактирование данных
  Method: PUT
  URL: /users/update/{user_id}
  Request:
  {
      "username":
      "password":
  }
 Response:
 {
   "success":
   "message":
 }
 Работа с заказами:
 - показать информацию по корзине пользователя
Method: GET
URL: /cart/{cart_id}
Request: -
Response:
{
    "id": ,
    "user": {
                "id":
                "user_name"
            },
    cartItems: [
                    {
                        "id":
                        "product":
                        "quantity":
                    },
                    {}
               ]
}
 - внести изменения в корзину
 Method: PUT
 URL: /cart_update/{cart_id}
 Request:
 {
     cartItems: [
                     {
                         "id":
                         "product":
                         "quantity":
                     }
                ]
 }
 Response:
 {
     "id": ,
     "user": {
                 "id":
                 "user_name"
             },
     cartItems: [
                     {
                         "id":
                         "product":
                         "quantity":
                     },
                     {}
                ]
 }
 - оформить заказ (т.е. сформировать заказ и перенести туда товары из корзины, очистить корзину,
 внести изменения в количество товара на складе в зарезервированные)
  Method: POST
  URL: /cart_to_order/{cart_id}
  Request:
  {
      cartItems: [
                      {
                          "id":
                          "product":
                          "quantity":
                      }
                 ]
  }
  Response:
  [
    {
    "product_id":
    "product":{
                "product_name":
                "quantity":
                "price":
              }
    "order_status":
    "payment_status":
    "payment_method":
    "create_date"
    "user": {
             "id":
             "user_name"
         }
    },
    {}
  ]

 - отмена заказа (по запросу пользователя)
Method: PUT
URL: /order_cancel/{order_id}
Request:-
Response:(update cart)
 {
     "id": ,
     "user": {
                 "id":
                 "user_name"
             },
     cartItems: [
                     {
                         "id":
                         "product":
                         "quantity":
                     },
                     {}
                ]
 }

 - передать список всех заказов пользователя
  Method: GET
  URL: /orders/{user_id}
  Request: -
  Response:
    [
      "id":
      {
      "product_id":
      "product":{
                  "product_name":
                  "quantity":
                  "price":
                }
      "order_status":
      "payment_status":
      "payment_method":
      "create_date"
      "user": {
               "id":
               "user_name"
           }
      },
      {}
    ]
 - передать информацию о конкретном заказе
   Method: GET
   URL: /orders/{user_id}&{order_id}
   Request: -
   Response:
{
"id":
"product_id":
"product":{
           "product_name":
           "quantity":
           "price":
         }
"order_status":
"payment_status":
"payment_method":
"create_date"
"user": {
        "id":
        "user_name"
    }
}
